<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>防抖函数与节流函数（待完善）</title>
    <link href="/2021/07/04/%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/"/>
    <url>/2021/07/04/%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ul><li>注：闭包的实际应用，阅读前请先理解闭包</li></ul><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><p>当持续触发事件时，一定时间内没有再次触发事件，事件处理函数才会执行一次。如果设定的事件到来之前，又一次触发了该事件，就重新开始</p><ul><li>关键词：触发事件、一段时间内、没有触发、时间执行、定时器</li><li>在设定的时间内，又一次触发了事件，重新开始延时（重新开始定时器）</li><li>那么意味着上一次还没有结束的定时器要清除掉，才能重新开始</li></ul><p>根据以上，我们可以想到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> timer; <span class="hljs-comment">// 声明一个变量</span><br>clearTimeOut(timer); <span class="hljs-comment">// 清除定时器</span><br><span class="hljs-comment">// 赋值，存储定时器</span><br>timer = setTimerOut(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;, delay);<br></code></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>eg:使用<code>echarts</code>时，改变浏览器宽度的时候，希望重新渲染。<code>echarts</code>的图像，可以使用此函数，提升性能。（虽然<code>echarts</code>里自带的<code>resize</code>函数）<br>eg:输入搜索框，输入结束后 n 秒才进行搜索请求，n 秒后又输入的内容，就重新开始倒计时。（解决搜索 bug）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> searchBox = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;search&quot;</span>); <span class="hljs-comment">// 获取元素</span></span><br><span class="javascript">  <span class="hljs-comment">// 防抖函数</span></span><br><span class="javascript">  <span class="hljs-comment">// delay 延迟时间</span></span><br><span class="javascript">  <span class="hljs-comment">// callback 回调函数</span></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">delay, callback</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> timer; <span class="hljs-comment">// 利用闭包保存同一个timer</span></span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">// 要想清除setTimeout，我们应该存储这个timer变量</span></span><br><span class="javascript">      <span class="hljs-comment">// timer变量需要一直存储在内存当中(内存泄漏，闭包)</span></span><br><span class="javascript">      <span class="hljs-comment">// 我们不想打印之前已经输入的结果，清除以前的定时器</span></span><br><span class="javascript">      <span class="hljs-comment">// 不断的执行函数不断的清除定时器</span></span><br><span class="javascript">      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// console.log(value) // 输出结果</span></span><br><span class="javascript">        callback(value); <span class="hljs-comment">// 通过回调函数在外面输出</span></span><br><span class="javascript">      &#125;, delay);</span><br><span class="javascript">    &#125;;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(value);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> debounceFunc = debounce(<span class="hljs-number">1000</span>, callback);</span><br><span class="javascript">  searchBox.addEventListener(<span class="hljs-string">&quot;keyup&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">    debounceFunc(e.target.value);</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><p>当持续触发事件的时候，保证一段时间内，只调用一次事件处理函数</p><ul><li>一段时间内，只做一件事</li></ul><h2 id="实际应用-表单的提交"><a href="#实际应用-表单的提交" class="headerlink" title="实际应用 表单的提交"></a>实际应用 表单的提交</h2><p>eg:鼠标不断点击触发，规定在 n 秒内多次点击只有一次生效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> searchBox = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>); <span class="hljs-comment">// 获取元素</span></span><br><span class="javascript">  <span class="hljs-comment">// 节流函数</span></span><br><span class="javascript">  <span class="hljs-comment">// wait 等待时间</span></span><br><span class="javascript">  <span class="hljs-comment">// callback 回调函数</span></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">thro</span>(<span class="hljs-params">callback, wait</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// wait 时间内，无论点击多次只执行一次</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> timeOut; <span class="hljs-comment">// 定义一个标识</span></span><br><span class="javascript">    <span class="hljs-comment">// 相当于办理业务</span></span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (!timeOut) &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 如果timeOut有值的话就不执行</span></span><br><span class="javascript">        timeOut = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">// console.log(&#x27;Boom！&#x27;);</span></span><br><span class="javascript">          callback();</span><br><span class="javascript">          <span class="hljs-comment">// 执行完以后，后面的就不执行了</span></span><br><span class="javascript">          timeOut = <span class="hljs-literal">null</span>;</span><br><span class="javascript">        &#125;, wait);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Boom！&quot;</span>);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  btn.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, thro(handle, <span class="hljs-number">2000</span>));</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包原理及使用（搬运）</title>
    <link href="/2021/07/04/%E9%97%AD%E5%8C%85%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/04/%E9%97%AD%E5%8C%85%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、闭包是什么"><a href="#一、闭包是什么" class="headerlink" title="一、闭包是什么"></a>一、闭包是什么</h2><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p><p>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p><p>在 <code>JavaScript</code> 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p><p>下面给出一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Mozilla&quot;</span>; <span class="hljs-comment">// name 是一个被 init 创建的局部变量</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayName</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// displayName() 是内部函数，一个闭包</span><br>    alert(name); <span class="hljs-comment">// 使用了父函数中声明的变量</span><br>  &#125;<br>  displayName();<br>&#125;<br>init();<br></code></pre></td></tr></table></figure><p><code>displayName()</code> 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量</p><h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>任何闭包的使用场景都离不开这两点：</p><ul><li><p>创建私有变量</p></li><li><p>延长变量的生命周期</p><blockquote><p>一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的</p></blockquote></li></ul><p>下面举个例子：</p><p>在页面上添加一些可以调整字号的按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeSizer</span>(<span class="hljs-params">size</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">document</span>.body.style.fontSize = size + <span class="hljs-string">&quot;px&quot;</span>;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> size12 = makeSizer(<span class="hljs-number">12</span>);<br><span class="hljs-keyword">var</span> size14 = makeSizer(<span class="hljs-number">14</span>);<br><span class="hljs-keyword">var</span> size16 = makeSizer(<span class="hljs-number">16</span>);<br><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;size-12&quot;</span>).onclick = size12;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;size-14&quot;</span>).onclick = size14;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;size-16&quot;</span>).onclick = size16;<br></code></pre></td></tr></table></figure><h3 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h3><p>柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 假设我们有一个求长方形面积的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getArea</span>(<span class="hljs-params">width, height</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> width * height;<br>&#125;<br><span class="hljs-comment">// 如果我们碰到的长方形的宽老是10</span><br><span class="hljs-keyword">const</span> area1 = getArea(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">const</span> area2 = getArea(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">const</span> area3 = getArea(<span class="hljs-number">10</span>, <span class="hljs-number">40</span>);<br><br><span class="hljs-comment">// 我们可以使用闭包柯里化这个计算面积的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getArea</span>(<span class="hljs-params">width</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">height</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> width * height;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> getTenWidthArea = getArea(<span class="hljs-number">10</span>);<br><span class="hljs-comment">// 之后碰到宽度为10的长方形就可以这样计算面积</span><br><span class="hljs-keyword">const</span> area1 = getTenWidthArea(<span class="hljs-number">20</span>);<br><br><span class="hljs-comment">// 而且如果遇到宽度偶尔变化也可以轻松复用</span><br><span class="hljs-keyword">const</span> getTwentyWidthArea = getArea(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h3 id="使用闭包模拟私有方法"><a href="#使用闭包模拟私有方法" class="headerlink" title="使用闭包模拟私有方法"></a>使用闭包模拟私有方法</h3><p>在 <code>JavaScript</code> 中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法</p><p>下面举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Counter = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> privateCounter = <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeBy</span>(<span class="hljs-params">val</span>) </span>&#123;<br>    privateCounter += val;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">increment</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      changeBy(<span class="hljs-number">1</span>);<br>    &#125;,<br>    <span class="hljs-attr">decrement</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      changeBy(-<span class="hljs-number">1</span>);<br>    &#125;,<br>    <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> privateCounter;<br>    &#125;,<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-keyword">var</span> Counter1 = makeCounter();<br><span class="hljs-keyword">var</span> Counter2 = makeCounter();<br><span class="hljs-built_in">console</span>.log(Counter1.value()); <span class="hljs-comment">/* logs 0 */</span><br>Counter1.increment();<br>Counter1.increment();<br><span class="hljs-built_in">console</span>.log(Counter1.value()); <span class="hljs-comment">/* logs 2 */</span><br>Counter1.decrement();<br><span class="hljs-built_in">console</span>.log(Counter1.value()); <span class="hljs-comment">/* logs 1 */</span><br><span class="hljs-built_in">console</span>.log(Counter2.value()); <span class="hljs-comment">/* logs 0 */</span><br></code></pre></td></tr></table></figure><p>上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式</p><p>两个计数器 <code>Counter1</code> 和 <code>Counter2</code> 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期</p><h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><p>如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响</p><p>例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。</p><p>原因在于每个对象的创建，方法都会被重新赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyObject</span>(<span class="hljs-params">name, message</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name.toString();<br>  <span class="hljs-built_in">this</span>.message = message.toString();<br>  <span class="hljs-built_in">this</span>.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>  &#125;;<br><br>  <span class="hljs-built_in">this</span>.getMessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.message;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyObject</span>(<span class="hljs-params">name, message</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name.toString();<br>  <span class="hljs-built_in">this</span>.message = message.toString();<br>&#125;<br>MyObject.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>&#125;;<br>MyObject.prototype.getMessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.message;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise刨析(搬运)</title>
    <link href="/2021/07/01/Promise%E5%88%A8%E6%9E%90/"/>
    <url>/2021/07/01/Promise%E5%88%A8%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p><code>Promise</code>，译为承诺，是异步编程的一种解决方案，比传统的解决方案（回调函数）更加合理和更加强大</p><p>在以往我们如果处理多层异步操作，我们往往会像下面那样编写我们的代码</p><span id="more"></span><img src="/img/猫娘表情包/39.png" class="zs"/><style>.zs{    width:100px;    height:100px;}</style><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">doSomething(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br>  doSomethingElse(<br>    result,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newResult</span>) </span>&#123;<br>      doThirdThing(<br>        newResult,<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">finalResult</span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;得到最终结果: &quot;</span> + finalResult);<br>        &#125;,<br>        failureCallback<br>      );<br>    &#125;,<br>    failureCallback<br>  );<br>&#125;, failureCallback);<br></code></pre></td></tr></table></figure><p>阅读上面代码，是不是很难受，上述形成了经典的回调地狱</p><p>现在通过<code>Promise</code>的改写上面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">doSomething()<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> doSomethingElse(result);<br>  &#125;)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newResult</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> doThirdThing(newResult);<br>  &#125;)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">finalResult</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;得到最终结果: &quot;</span> + finalResult);<br>  &#125;)<br>  .catch(failureCallback);<br></code></pre></td></tr></table></figure><p>瞬间感受到 <code>promise</code> 解决异步操作的优点：</p><p>链式操作减低了编码难度<br>代码可读性明显增强<br>下面我们正式来认识 <code>promise</code>：</p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p><code>promise</code> 对象仅有三种状态</p><ul><li><code>pending</code>（进行中）</li><li><code>fulfilled</code>（已成功）</li><li><code>rejected</code>（已失败）</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>对象的状态不受外界影响，只有异步操作的结果，可以决定当前是哪一种状态</li><li>一旦状态改变（从 pending 变为 fulfilled 和从 pending 变为 rejected），就不会再变，任何时候都可以得到这个结果 #流程</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>认真阅读下图，我们能够轻松了解<code>promise</code>整个流程<br><img src="/img/promise/promise.png"/></p><h1 id="二、用法"><a href="#二、用法" class="headerlink" title="二、用法"></a>二、用法</h1><p><code>Promise</code> 对象是一个构造函数，用来生成 <code>Promise</code> 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;&#125;);<br></code></pre></td></tr></table></figure><p><code>Promise</code> 构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code> 和 <code>reject</code></p><p>resolve 函数的作用是，将 <code>Promise</code> 对象的状态从“未完成”变为“成功”<br>reject 函数的作用是，将 <code>Promise</code> 对象的状态从“未完成”变为“失败” #实例方法<br><code>Promise</code> 构建出来的实例存在以下方法：</p><ul><li>then()</li><li>then()</li><li>catch()</li><li>finally()</li></ul><h2 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h2><p>then 是实例状态发生改变时的回调函数，第一个参数是 resolved 状态的回调函数，第二个参数是 rejected 状态的回调函数</p><p>then 方法返回的是一个新的 Promise 实例，也就是 promise 能链式书写的原因</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">getJSON(<span class="hljs-string">&quot;/posts.json&quot;</span>)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> json.post;<br>  &#125;)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">post</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h2><p><code>catch()</code>方法是<code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>的别名，用于指定发生错误时的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">getJSON(<span class="hljs-string">&quot;/posts.json&quot;</span>)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">posts</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;)<br>  .catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发生错误！&quot;</span>, error);<br>  &#125;);<br></code></pre></td></tr></table></figure><p><code>Promise</code> 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">getJSON(<span class="hljs-string">&quot;/post/1.json&quot;</span>)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">post</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> getJSON(post.commentURL);<br>  &#125;)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">comments</span>) </span>&#123;<br>    <span class="hljs-comment">// some code</span><br>  &#125;)<br>  .catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// 处理前面三个 Promise 产生的错误</span><br>  &#125;);<br></code></pre></td></tr></table></figure><p>一般来说，使用 <code>catch</code> 方法代替 <code>then()</code>第二个参数</p><p><code>Promise</code> 对象抛出的错误不会传递到外层代码，即不会有任何反应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> someAsyncThing = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-comment">// 下面一行会报错，因为 x 没有声明</span><br>    resolve(x + <span class="hljs-number">2</span>);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>浏览器运行到这一行，会打印出错误提示 <code>ReferenceError: x is not defined</code>，但是不会退出进程</p><p><code>catch()</code>方法之中，还能再抛出错误，通过后面 <code>catch</code> 方法捕获到</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h2><p><code>finally()</code>方法用于指定不管 <code>Promise</code> 对象最后状态如何，都会执行的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">promise<br>.then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;···&#125;)<br>.catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;···&#125;)<br>.finally(<span class="hljs-function">() =&gt;</span> &#123;···&#125;);<br></code></pre></td></tr></table></figure><h2 id="构造函数方法"><a href="#构造函数方法" class="headerlink" title="构造函数方法"></a>构造函数方法</h2><p><code>Promise</code> 构造函数存在以下方法：</p><ul><li>all()</li><li>race()</li><li>allSettled()</li><li>resolve()</li><li>reject()</li><li>try()</li></ul><h2 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h2><p><code>Promise.all()</code>方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.all([p1, p2, p3]);<br></code></pre></td></tr></table></figure><p>接受一个数组（迭代对象）作为参数，数组成员都应为 <code>Promise</code> 实例</p><p>实例 <code>p</code> 的状态由 <code>p1</code>、<code>p2</code>、<code>p3</code> 决定，分为两种：</p><p>只有 <code>p1</code>、<code>p2、</code>p3<code>的状态都变成</code>fulfilled<code>，</code>p<code>的状态才会变成</code>fulfilled<code>，此时 </code>p1<code>、</code>p2<code>、</code>p3<code>的返回值组成一个数组，传递给</code>p<code>的回调函数 只要</code>p1<code>、</code>p2<code>、</code>p3<code>之中有一个被</code>rejected<code>，</code>p<code>的状态就变成</code>rejected<code>，此时第一个被 </code>reject<code>的实例的返回值，会传递给</code>p` 的回调函数</p><ul><li>注意，如果作为参数的 <code>Promise</code> 实例，自己定义了 catch 方法，那么它一旦被 <code>rejected</code>，并不会触发 <code>Promise.all()</code>的 <code>catch</code> 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> result)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> e);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;报错了&quot;</span>);<br>&#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> result)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> e);<br><br><span class="hljs-built_in">Promise</span>.all([p1, p2])<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(result))<br>  .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(e));<br><span class="hljs-comment">// [&quot;hello&quot;, Error: 报错了]</span><br></code></pre></td></tr></table></figure><p>如果 <code>p2</code> 没有自己的 <code>catch</code> 方法，就会调用 <code>Promise.all()</code>的 <code>catch</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> result);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;报错了&quot;</span>);<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> result);<br><br><span class="hljs-built_in">Promise</span>.all([p1, p2])<br>  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(result))<br>  .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(e));<br><span class="hljs-comment">// Error: 报错了</span><br></code></pre></td></tr></table></figure><h2 id="race"><a href="#race" class="headerlink" title="race()"></a>race()</h2><p><code>Promise.race()</code>方法同样是将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.race([p1, p2, p3]);<br></code></pre></td></tr></table></figure><p>只要 <code>p1</code>、<code>p2</code>、<code>p3</code> 之中有一个实例率先改变状态，<code>p</code> 的状态就跟着改变</p><p>率先改变的 <code>Promise</code> 实例的返回值则传递给 <code>p</code> 的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.race([<br>  fetch(<span class="hljs-string">&quot;/resource-that-may-take-a-while&quot;</span>),<br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;request timeout&quot;</span>)), <span class="hljs-number">5000</span>);<br>  &#125;),<br>]);<br><br>p.then(<span class="hljs-built_in">console</span>.log).catch(<span class="hljs-built_in">console</span>.error);<br></code></pre></td></tr></table></figure><h2 id="allSettled"><a href="#allSettled" class="headerlink" title="allSettled()"></a>allSettled()</h2><p><code>Promise.allSettled()</code>方法接受一组 <code>Promise</code> 实例作为参数，包装成一个新的 <code>Promise</code> 实例</p><p>只有等到所有这些参数实例都返回结果，不管是 <code>fulfilled</code> 还是 <code>rejected</code>，包装实例才会结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promises = [fetch(<span class="hljs-string">&quot;/api-1&quot;</span>), fetch(<span class="hljs-string">&quot;/api-2&quot;</span>), fetch(<span class="hljs-string">&quot;/api-3&quot;</span>)];<br><br><span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.allSettled(promises);<br>removeLoadingIndicator();<br></code></pre></td></tr></table></figure><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve()"></a>resolve()</h2><p>将现有对象转为 <code>Promise</code> 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> resolve(<span class="hljs-string">&quot;foo&quot;</span>));<br></code></pre></td></tr></table></figure><p>参数可以分成四种情况，分别如下：</p><ul><li>参数是一个 <code>Promise</code> 实例，<code>promise.resolve</code> 将不做任何修改、原封不动地返回这个实例</li><li>参数是一个 <code>thenable</code> 对象，<code>promise.resolve</code> 会将这个对象转为 <code>Promise</code> 对象，然后就立即执行 <code>thenable</code> 对象的 then()方法</li><li>参数不是具有 <code>then()</code>方法的对象，或根本就不是对象，<code>Promise.resolve()</code>会返回一个新的 <code>Promise</code> 对象，状态为 <code>resolved</code></li><li>没有参数时，直接返回一个 <code>resolved</code> 状态的 <code>Promise</code> 对象</li></ul><h2 id="reject"><a href="#reject" class="headerlink" title="reject()"></a>reject()</h2><p><code>Promise.reject(reason)</code>方法也会返回一个新的 <code>Promise</code> 实例，该实例的状态为 <code>rejected</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;出错了&#x27;</span>);<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> reject(<span class="hljs-string">&#x27;出错了&#x27;</span>))<br><br>p.then(<span class="hljs-literal">null</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(s)<br>&#125;);<br><span class="hljs-comment">// 出错了</span><br><span class="hljs-built_in">Promise</span>.reject()方法的参数，会原封不动地变成后续方法的参数<br><br><span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;出错了&#x27;</span>)<br>.catch(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(e === <span class="hljs-string">&#x27;出错了&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// true #三、使用场景</span><br></code></pre></td></tr></table></figure><p>将图片的加载写成一个 <code>Promise</code>，一旦加载完成，<code>Promise</code> 的状态就发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> preloadImage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">path</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">new</span> Image();<br>    image.onload = resolve;<br>    image.onerror = reject;<br>    image.src = path;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>通过链式操作，将多个渲染数据分别给个 <code>then</code>，让其各司其职。或当下个异步请求依赖上个请求结果的时候，我们也能够通过链式操作友好解决问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 各司其职</span><br>getInfo()<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; bannerList &#125; = res;<br>    <span class="hljs-comment">//渲染轮播图</span><br>    <span class="hljs-built_in">console</span>.log(bannerList);<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; storeList &#125; = res;<br>    <span class="hljs-comment">//渲染店铺列表</span><br>    <span class="hljs-built_in">console</span>.log(storeList);<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;)<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; categoryList &#125; = res;<br>    <span class="hljs-built_in">console</span>.log(categoryList);<br>    <span class="hljs-comment">//渲染分类列表</span><br>    <span class="hljs-keyword">return</span> res;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>通过 <code>all()</code>实现多个请求合并在一起，汇总所有请求结果，只需设置一个 <code>loading</code> 即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initLoad</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// loading.show() //加载 loading</span><br>  <span class="hljs-built_in">Promise</span>.all([getBannerList(), getStoreList(), getCategoryList()])<br>    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res);<br>      loading.hide(); <span class="hljs-comment">//关闭 loading</span><br>    &#125;)<br>    .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(err);<br>      loading.hide(); <span class="hljs-comment">//关闭 loading</span><br>    &#125;);<br>&#125;<br><span class="hljs-comment">//数据初始化</span><br>initLoad();<br></code></pre></td></tr></table></figure><p>通过 <code>race</code> 可以设置图片请求超时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//请求某个图片资源</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">requestImg</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> Image();<br>    img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      resolve(img);<br>    &#125;;<br>    <span class="hljs-comment">//img.src = &quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg&quot;; 正确的</span><br>    img.src = <span class="hljs-string">&quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1&quot;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//延时函数，用于给请求计时</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeout</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      reject(<span class="hljs-string">&quot;图片请求超时&quot;</span>);<br>    &#125;, <span class="hljs-number">5000</span>);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-built_in">Promise</span>.race([requestImg(), timeout()])<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">results</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(results);<br>  &#125;)<br>  .catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(reason);<br>  &#125;);<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://es6.ruanyifeng.com/#docs/promise">https://es6.ruanyifeng.com/#docs/promise</a></p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>等高布局、圣杯布局、双飞翼布局的实现原理（待更新）</title>
    <link href="/2021/07/01/%E7%AD%89%E9%AB%98%E5%B8%83%E5%B1%80%E3%80%81%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E3%80%81%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/07/01/%E7%AD%89%E9%AB%98%E5%B8%83%E5%B1%80%E3%80%81%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E3%80%81%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="等高布局："><a href="#等高布局：" class="headerlink" title="等高布局："></a>等高布局：</h2><h3 id="什么是等高布局？"><a href="#什么是等高布局？" class="headerlink" title="什么是等高布局？"></a>什么是等高布局？</h3><p>等高布局是指多列子元素在父元素中实现高度相等视觉效果的布局方式。</p><ol><li><p>方法一： 利用内外边距相抵消，父元素设置 <code>overflow:hidden;</code><br><strong>优点</strong>：代码简洁<br><strong>弊端</strong>：溢出的内容不能超过伪等高的 <code>padding-bottom</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warp clearfix&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第一列<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>锦瑟无端五十弦，<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>一弦一柱思华年。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第2列<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>风萧萧兮易水寒<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第3列<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>陌上人如玉，<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君子世无双。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>     * &#123;<br>         <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>         <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>     &#125;<br>     <span class="hljs-comment">/*清浮动*/</span><br>     <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>         <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>         <span class="hljs-attribute">display</span>: block;<br>         <span class="hljs-attribute">clear</span>: both;<br>     &#125;<br>     <span class="hljs-comment">/*外部容器*/</span><br>     <span class="hljs-selector-class">.warp</span>&#123;<br>         <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>         <span class="hljs-attribute">background</span>: pink;<br>         <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>     &#125;<br>     <span class="hljs-selector-class">.warp</span> <span class="hljs-selector-tag">div</span>&#123;<br>        <span class="hljs-attribute">float</span>: left;<br>        <span class="hljs-comment">/*此处用内外抵消法，注意设置最小高度*/</span><br>        <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">margin-bottom</span>: -<span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100px</span>;<br>     &#125;<br>     <span class="hljs-selector-class">.left</span>&#123;<br>         <span class="hljs-attribute">width</span>: <span class="hljs-number">25%</span>;<br>         <span class="hljs-attribute">background</span>: lightgreen;<br>     &#125;<br>     <span class="hljs-selector-class">.center</span>&#123;<br>         <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>         <span class="hljs-attribute">background</span>: lightyellow;<br>     &#125;<br>     <span class="hljs-selector-class">.right</span>&#123;<br>         <span class="hljs-attribute">width</span>: <span class="hljs-number">25%</span>;<br>         <span class="hljs-attribute">background</span>: lightblue;<br>     &#125;<br> &lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>方法二：利用内容撑开父元素的特点，给每一列添加相对应用的<br>容器，并进行相互嵌套，并在每个容器中设置背景色。 （这里需<br>要提醒大家你有多少列就需要多少个容器，比如说我们说的<br>三列，那么你就需要使用三个容器）</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML、CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/2021/06/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2021/06/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>博主太懒了，以至于很多功能未完善</p><span id="more"></span><img src="/img/猫娘表情包/21.png" class="zs"/><style>.zs{    width:100px;    height:100px;}</style>]]></content>
    
    
    <categories>
      
      <category>未知</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
